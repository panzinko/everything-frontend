/* tslint:disable */
/* eslint-disable */
/**
 * Rick and Morty API
 * API for fetching character information from Rick and Morty series
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Character, CharacterListResponse } from '../models/index';
import { CharacterFromJSON, CharacterListResponseFromJSON } from '../models/index';
import * as runtime from '../runtime';

export interface FetchAllCharactersRequest {
  name?: string;
  page?: number;
}

export interface FetchSingleCharacterRequest {
  id: number;
}

/**
 *
 */
export class DefaultApi extends runtime.BaseAPI {
  /**
   * Get a list of characters with optional filtering
   * Fetch all characters
   */
  async fetchAllCharactersRaw(
    requestParameters: FetchAllCharactersRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CharacterListResponse>> {
    const queryParameters: any = {};

    if (requestParameters['name'] != null) {
      queryParameters['name'] = requestParameters['name'];
    }

    if (requestParameters['page'] != null) {
      queryParameters['page'] = requestParameters['page'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/character`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CharacterListResponseFromJSON(jsonValue),
    );
  }

  /**
   * Get a list of characters with optional filtering
   * Fetch all characters
   */
  async fetchAllCharacters(
    requestParameters: FetchAllCharactersRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CharacterListResponse> {
    const response = await this.fetchAllCharactersRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Fetch a single character by ID
   */
  async fetchSingleCharacterRaw(
    requestParameters: FetchSingleCharacterRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Character>> {
    if (requestParameters['id'] == null) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter "id" was null or undefined when calling fetchSingleCharacter().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/character/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters['id'])),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => CharacterFromJSON(jsonValue));
  }

  /**
   * Fetch a single character by ID
   */
  async fetchSingleCharacter(
    requestParameters: FetchSingleCharacterRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Character> {
    const response = await this.fetchSingleCharacterRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
